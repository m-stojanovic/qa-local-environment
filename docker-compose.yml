services:
  db:
    container_name: db
    hostname: postgres
    build:
      context: .
      dockerfile: postgres/Dockerfile
      network: qa-local-environment_default
    restart: unless-stopped
    volumes:
      - ./pg-init-scripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: DrPepper00
      TZ: UTC
      POSTGRES_MULTIPLE_DATABASES: octopus, octopuslog, ums, octopus_analytics, quizz, ecommerce, chat, octopus_comments, octopus_ads, octopus_subscriptions
    ports:
      - 5432:5432

  pgadmin:
    container_name: pgadmin
    hostname: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
       - pgadmin:/root/.pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    depends_on:
      - db

  octopus-subscription:
    container_name: octopus-subscription
    hostname: octopus-subscription
    build:
      context: .
      dockerfile: octopus-subscription/Dockerfile
      network: qa-local-environment_default
    environment:
      DB_NAME: "octopus_subscriptions"
      CONFIG_NAME: "subscriptionserver"
      SERVICE: "SubscriptionServer"

  octopus-server:
    container_name: octopus-server
    hostname: octopus-server
    restart: unless-stopped
    build:
      context: .
      dockerfile: octopus-server/Dockerfile
      network: qa-local-environment_default
    environment:
      DB_NAME: "octopus"
      CONFIG_NAME: "octopusserver"
      SERVICE: "OctopusServer"

  ads-server:
    container_name: ads-server
    hostname: ads-server
    restart: unless-stopped
    build:
      context: .
      dockerfile: ads-server/Dockerfile
      network: qa-local-environment_default
    environment:
      DB_NAME: "octopus_ads"
      CONFIG_NAME: "octopusAdsServer"
      SERVICE: "OctopusAdsServer"

  octopus-comments:
    container_name: octopus-comments
    hostname: octopus-comments
    restart: unless-stopped
    build:
      context: .
      dockerfile: octopus-comments/Dockerfile
      network: qa-local-environment_default
    environment:
      DB_NAME: "octopus_comments"
      CONFIG_NAME: "commentserver"
      SERVICE: "CommentServer"

  ums-server:
    container_name: ums-server
    hostname: ums-server
    restart: unless-stopped
    build:
      context: .
      dockerfile: ums-server/Dockerfile
      network: qa-local-environment_default
    environment:
      DB_NAME: "ums"
      CONFIG_NAME: "ums"
      SERVICE: "ums"

  quizz-server:
    container_name: quizz-server
    hostname: quizz-server
    restart: unless-stopped
    build:
      context: .
      dockerfile: quizz-server/Dockerfile
      network: qa-local-environment_default
    environment:
      DB_NAME: "quizz"
      CONFIG_NAME: "quizzserver"
      SERVICE: "QuizzServer"

  octopus-analytics:
    container_name: octopus-analytics
    hostname: octopus-analytics
    restart: unless-stopped
    build:
      context: .
      dockerfile: octopus-analytics/Dockerfile
      network: qa-local-environment_default
    environment:
      DB_NAME: "octopus_analytics"
      CONFIG_NAME: "octopusanalyticsserver"
      SERVICE: "OctopusAnalyticsServer"

  octopus-ecommerce:
    container_name: octopus-ecommerce
    hostname: octopus-ecommerce
    restart: unless-stopped
    build:
      context: .
      dockerfile: octopus-ecommerce/Dockerfile
      network: qa-local-environment_default
    environment:
      DB_NAME: "ecommerce"
      CONFIG_NAME: "ecommerce"
      SERVICE: "eCommerce"

  signaling-server:
    container_name: signaling-server
    hostname: signaling-server
    restart: unless-stopped
    build:
      context: .
      dockerfile: signaling-server/Dockerfile
      network: qa-local-environment_default
    environment:
      CONFIG_NAME: "signaling-server"
      SERVICE: "signaling-server"

  octopush:
    container_name: octopus-octopush
    hostname: octopus-octopush
    restart: unless-stopped
    build:
      context: .
      dockerfile: octopus-octopush/Dockerfile
      network: qa-local-environment_default
    environment:
      CONFIG_NAME: "octopush"
      SERVICE: "Octopush"

  octopus-chat:
    container_name: octopus-chat
    hostname: chat-server
    restart: unless-stopped
    build:
      context: .
      dockerfile: chat-server/Dockerfile
      network: qa-local-environment_default
    environment:
      CONFIG_NAME: "chatserver"
      SERVICE: "octopus-chat-server"
      DB_NAME: "chat"

  rabbit:
    image: rabbitmq:3.8-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
        - 5672:5672
        - 15672:15672

  redis:
    image: redis:6.2-alpine
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"

  minio:
    container_name: minio
    hostname: minio
    image: minio/minio
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data

  minio-buckets:
    image: minio/mc
    entrypoint:  >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add s3 http://minio:9000 minio minio123 --api S3v4;
      /usr/bin/mc mb s3/qscreenshots;
      /usr/bin/mc policy set public s3/qscreenshots;
      /usr/bin/mc mb s3/qsnippets;
      /usr/bin/mc policy set public s3/qsnippets;
      exit 0;
      "

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    hostname: nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/octopus-env.conf:/etc/nginx/conf.d/default.conf

volumes:
  pgadmin: